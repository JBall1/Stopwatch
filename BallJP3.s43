;-------------------------------------------------------------------------------
;       Description:    This program first shows my chart number given, 2231.
;                        Pressing the right most button will show "--31", likewise
;                       pressing the left most button will show "21--" and finally
;                        pressing the middle button will show "22.:3.1". This is
;                        all acomplished on the msp430g2553 using the 4 digit 7-
;                        segment display by using multiplexing as well as port2  
;                        and a timerA0 interrupt.
;                        
;
;
;       Written by:     Joshua Ball
;       Date:           3/28/2018
;       Company:        Texas Tech University
;       Adapted from:   DemoWith_4digitExpansionBdSimpleTimerInterrupt.s43 by Dr. Michael Helm
;       Target Device:  Texas Instruments MSP430G2553 with the
;                       LTC-4627JR 4 digit expansion Display Board installed
;       Assembler/IDE:  IAR Embedded Workbench 6.50.1 Kickstart version;
;       HW I/O assignments:
;       P1.0    (output) Segment A (active low) drives display board
;       P1.1    (output) Segment B (active low) drives display board
;       P1.2    (output) Segment C (active low) drives display board
;       P1.3    (output) Segment D (active low) drives display board
;       P1.4    (output) Segment E (active low) drives display board
;       P1.5    (output) Segment F (active low) drives display board
;       P1.6    (output) Segment G (active low) drives display board
;       P1.7    (output) Segment DP (active low) drives display board
;
;       P2.0    (output) Digit 3 (active low) MSdigit (leftmost)
;       P2.1    (output) Digit 2 (active low)  
;       P2.2    (output) Digit 1 (active low)  
;       P2.3    (output) Digit 0 (active low) LSdigit (rightmost)
;       P2.4    (output) Other - (dots - colon)
;       P2.5    (input)  Pushbutton 0 (active low) (rightmost)
;       P2.6    (input)  Pushbutton 1 (active low) (middle)
;       P2.7    (input)  Pushbutton 2 (active low) (leftmost)
;
;
;
;*******************************************************************************
#include  "msp430g2553.h"
;-------------------------------------------------------------------------------
; Definition of Constants
;-------------------------------------------------------------------------------

; NOTE: purposely set slow to demonstrate display multiplexing
;TIMER_A_COUNT_1   EQU   10000    ; set count value in TimerA_0 
TIMER_A_COUNT_1   EQU   100    ; set count value in TimerA_0 
;TIMER_A_COUNT_1   EQU   1000    ; set count value in TimerA_0 
LONG_DELAY      EQU     65535  ; max 16 bit value (FFFFh)
;definitions of segment positions 
SEG_A         EQU     %00000001 ; Port pin position P1.0
SEG_B         EQU     %00000010 ; Port pin position P1.1
SEG_C         EQU     %00000100 ; Port pin position P1.2
SEG_D         EQU     %00001000 ; Port pin position P1.3
SEG_E         EQU     %00010000 ; Port pin position P1.4
SEG_F         EQU     %00100000 ; Port pin position P1.5
SEG_G         EQU     %01000000 ; Port pin position P1.6
SEG_DP        EQU     %10000000 ; Port pin position P1.7

;since inverted pattern is needed for the display, this defines inverse pattern
SEG_A_N       EQU     ~SEG_A ; Port pin position P1.0
SEG_B_N       EQU     ~SEG_B ; Port pin position P1.1
SEG_C_N       EQU     ~SEG_C ; Port pin position P1.2
SEG_D_N       EQU     ~SEG_D ; Port pin position P1.3
SEG_E_N       EQU     ~SEG_E ; Port pin position P1.4
SEG_F_N       EQU     ~SEG_F ; Port pin position P1.5
SEG_G_N       EQU     ~SEG_G ; Port pin position P1.6
SEG_DP_N      EQU     ~SEG_DP ; Port pin position P1.7

;NOTE: display board requires INVERSE of these patterns due to Active LOW
DIG_3         EQU     %00000001 ; Port pin position P2.0 (MSdigit)
DIG_2         EQU     %00000010 ; Port pin position P2.1
DIG_1         EQU     %00000100 ; Port pin position P2.2
DIG_0         EQU     %00001000 ; Port pin position P2.3(LSdigit)
DP_COM        EQU     %00010000 ; Port pin position P2.4

;since inverted pattern is needed for the display, this defines inverse pattern
DIG_3_N       EQU     ~DIG_3 ; Port pin position P2.0 (MSdigit)
DIG_2_N       EQU     ~DIG_2 ; Port pin position P2.1
DIG_1_N       EQU     ~DIG_1 ; Port pin position P2.2
DIG_0_N       EQU     ~DIG_0 ; Port pin position P2.3(LSdigit)
DP_COM_N      EQU     ~DP_COM ; Port pin position P2.4
DIG_4_N       EQU      DP_COM_N

PB_0         EQU     %00100000 ; Port pin position P2.5
PB_1         EQU     %01000000 ; Port pin position P2.6
PB_2         EQU     %10000000 ; Port pin position P2.7


SEG_PORT         EQU     P1OUT
DIG_PORT         EQU     P2OUT
PB_PORT          EQU     P2IN

;NOTE: display bd requires the INVERSE of these patterns due to Active LOW
ONE             EQU     %00000110
TWO             EQU     %01011011
THREE           EQU     %01001111
FOUR            EQU     %01100110
FIVE            EQU     %01101101
SIX             EQU     %01111101
SEVEN           EQU     %00000111
EIGHT           EQU     %01111111
NINE            EQU     %01100111
ZERO            EQU     %00111111

;since inverted pattern is needed for the display, this defines inverse pattern
ONE_N           EQU     ~%00000110
TWO_N           EQU     ~%01011011
THREE_N         EQU     ~%01001111
FOUR_N          EQU     ~%01100110
FIVE_N          EQU     ~%01101101
SIX_N           EQU     ~%01111101
SEVEN_N         EQU     ~%00000111
EIGHT_N         EQU     ~%01111111
NINE_N          EQU     ~%01100111
ZERO_N          EQU     ~%00111111
COLON_N         EQU     ~%11111111
TWO_N_DP        EQU     ~%11011011
THREE_N_DP      EQU     ~%11001111
;-------------------------------------------------------------------------------
; Definition of Variables
;-------------------------------------------------------------------------------

            ORG   0x0200     ; beginning of RAM space (necessary statement)
            
DisplayValue  DW  0         ; contains 4 digit value to display in BCD format
                            ; BCDdig3 | BCDdig2  | BCDdig1  | BCDdig0
                            ; xxxx      xxxx       xxxx       xxxx
                            
CurrentDigitPos  DB  0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit position of current digit to write

CurrentDigitValue DB 0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit value of next digit to write                           
DecimalOn       DB 0
;-------------------------------------------------------------------------------
            ORG     0xC000                  ; Program Reset (prog memory start)
                                            ; this is Program memory start 
                                            ; address for MSP430G2553 (16K)
;-------------------------------------------------------------------------------
RESET       mov.w   #0x0400,SP        ; Initialize stackpointer(to end of RAM +1)
                                     ; RAM is 512 bytes, last position is 3FFh
                                     
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT

SetupP1   
            
            clr.b   &P2IFG
            mov.b   #0xFF, &P1DIR  ; all as outputs          
            bis.b   #PB_0+PB_1+PB_2, &P2IE    ; enable interrput for Pushbutton
            mov.b   #DIG_3+DIG_2+DIG_1+DIG_0+DP_COM, &P2DIR
            bis.b   #PB_0+PB_1+PB_2, &P2IES   ; set edge select for high to low trans
            clr.b   &P2IFG
            clr DisplayValue
            clr DecimalOn
            
            
; activate the General Purpose Digital I/O mode for P2.6 and P2.7
           bic.b   #PB_1+PB_2, &P2SEL
                                                                                        
           ; The PushButtons are wired to P2.5,6,7 (active LOW), so we need to  
           ; turn on the internal Pullup Resistors  - this is done with P2REN
           ; register
           
           ; 
           mov.b    #PB_0+PB_1+PB_2, &P2REN    ;turn on the internal resistor
           mov.b    #PB_0+PB_1+PB_2, &P2OUT    ; set the resistor to Pullup mode

           ; turn off all the segments and digits
           mov.b #0xFF, &SEG_PORT
           mov.b #0xFF, &DIG_PORT    
           
SetupTimerA
            mov.w   #TIMER_A_COUNT_1,&TA0CCR0 ;load a count value into the counter
            mov.w   #CCIE,&TA0CCTL0        ; enable the timer interrupt
      
            ;mov.w   #TASSEL_2+ID_1+MC_1,&TA0CTL   ; select SMCLK/2, up mode
            mov.w   #TASSEL_2+ID_3+MC_1,&TA0CTL   ; select SMCLK/8, up mode            
      

            
EnableGeneralInterrupts
            clr.b   &P2IFG
            bis.b #GIE,SR          ; enable the general interrupts bit
             ;eint    ; this is another option to do the same thing
 
    ; start of main program   

DisplayTop     
           ;put something into DisplayValue so we can write it out
           clr.b &DisplayValue
           clr.b   &P2IFG
           mov #0x2231, &DisplayValue



Done      
          jmp Done   ; idle here and wait on Timer interrupts
                      ; Each timer interrupt will update next digit in display

;-------------------------------------------------------------------------------
;           End of main code
;-------------------------------------------------------------------------------                                            
                                           
;-------------------------------------------------------------------------------
;           Subroutines
;------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------
; WriteNextDigitToDisplay
;  passed in - DisplayValue, CurrentDigitPos 
;  returned - nothing
;  accomplishes - Writes next digit to the expansion bd display
;  uses: R15, global variable CurrentDigitPos, CurrentDigitValue
;-------------------------------------------------------------------------------
WriteNextDigitToDisplay
    //if DecimalOn has a value put into it, go to the WriteWithColon Function
    bit.b #00000001,DecimalOn
    jne WriteWithColon
    //This means there was no value, just putting 0's to make sure and keep thing
    ;clean
    mov 0x0000, DecimalOn
    
    

;This means there was not a colon so this function executes    
WriteWithoutColon
    mov 0x0000, DecimalOn
    push R15
    
    
    cmp #0, &CurrentDigitPos
    jeq  WriteDig0
    
    cmp #1, &CurrentDigitPos
    jeq  WriteDig1
    
    cmp #2, &CurrentDigitPos
    jeq  WriteDig2
    
    cmp #3, &CurrentDigitPos
    jeq  WriteDig3
    
    clr &CurrentDigitPos   ; reset it
    jmp DoneWithDigitWriteTotally  ; get out of here

;this means there was a value in DecimalOn
WriteWithColon
    push R15     ; save R15 since we use it here
    ;clr.b R15
    
    cmp #0, &CurrentDigitPos
    jeq  WriteDig0
    
    cmp #1, &CurrentDigitPos
    jeq  WriteDig1
    
    cmp #2, &CurrentDigitPos
    jeq  WriteDig2
    
    cmp #3, &CurrentDigitPos
    jeq  WriteDig3
   
    cmp #4, &CurrentDigitPos
    jeq  WriteDig4
    
    ; invalid case - CurrentDigPos is invalid value
    clr &CurrentDigitPos   ; reset it
    jmp DoneWithDigitWriteTotally  ; get out of here
    
    
    
    
WriteDig0
    mov.b #0FFh,DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #0x000F, R15         ; mask out all but Dig 0
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_0_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig1
    mov.b #0FFh,DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #0x00F0, R15         ; mask out all but Dig 1
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_1_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig2
    mov.b #0FFh,DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #0x0F00, R15         ; mask out all but Dig 2
    swpb R15                    ; get the value into LSnibble position
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_2_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig3
    mov.b #0FFh,DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #0xF000, R15         ; mask out all but Dig 3
    swpb R15
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15    
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_3_N, DIG_PORT
    jmp DoneWithDigitWrite    

WriteDig4
    mov.b #0FFh,DIG_PORT    
    mov #%11111100, R15  ; make a copy 
    ; use the value in R15 as an offset or index into SegPatternTable
    ;add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b  R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_4_N, DIG_PORT
    ;clr.b R12
    jmp DoneWithDigitWrite
    

DoneWithDigitWrite
    inc &CurrentDigitPos   ; set up for next digit position for next time
DoneWithDigitWriteTotally    
    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of WriteNextDigitToDisplay
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
; Delay_Long
;  passed in - nothing
;  returned - nothing
;  accomplishes - long delay
;  uses: R15
;-------------------------------------------------------------------------------
Delay_Long
    push R15     ; save R15 since we use it here
DelayTopL
    mov #LONG_DELAY, R15     ;load loop counter (R15) with Long Delay constant
Loop1Long
    dec R15                     ; decrement loop counter
    jnz Loop1Long               ; Zero yet?, no decrement again

    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of Delay_Long
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
; Button0
;  passed in - nothing
;  returned - nothing
;  accomplishes - moving 0xAA31 into DisplayValue
;  uses: PB_0,DisplayValue
;-------------------------------------------------------------------------------
Button0
    mov #0xAA31, &DisplayValue
    mov 0x0000, DecimalOn
    clr.b   &P2IFG
    jmp Done_here
ret
;-------------------------------------------------------------------------------
;  end of Button0
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
; Button1
;  passed in - nothing
;  returned - nothing
;  accomplishes - moving 22AA into display value
;  uses: PB_1,DisplayValue
;-------------------------------------------------------------------------------
Button1
    mov #0x22AA, &DisplayValue
    mov 0x0000, DecimalOn
    clr.b   &P2IFG
    jmp Done_here
ret
;-------------------------------------------------------------------------------
;  end of Button1
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Button2
;  passed in - nothing
;  returned - nothing
;  accomplishes - moving 0x2BC1 into DisplayValue and 0x0001 into DecimalOn
;  uses: PB_2,DisplayValue,DecimalOn
;-------------------------------------------------------------------------------
Button2 
        mov #0x2BC1, &DisplayValue
        mov.b #00000001, DecimalOn
        clr.b   &P2IFG
        jmp Done_here
ret
;-------------------------------------------------------------------------------
;  end of Button2
;-------------------------------------------------------------------------------



;-------------------------------------------------------------------------------
;           End of all Subroutines
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;          Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Interrupt Service Routine for Timer_A 0
;  Passed in: nothing
;  Activated every time TimerA_0 times out
;  
;  Uses: nothing directly, but does call WriteNextDigitToDisplay subroutine
;-------------------------------------------------------------------------------

TA0_ISR
      call #WriteNextDigitToDisplay    
      reti    ; return from interrupt


;-------------------------------------------------------------------------------
;  end of TA0_ISR   Timer_A 0 Interrupt Service Routine
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
; Interrupt Service Routine for Port2_ISR
;  Passed in: nothing
;  Activated every time a pushbutton is pressed 
;  
;  Uses: Checks which push button was pressed and goes to the respective
;        function
;-------------------------------------------------------------------------------
Port2_ISR   
      bit.b #%00100000, &P2IFG   ; was it this Pushbutton?
      jne Button0

      bit.b  #%01000000, &P2IFG   ; was it this Pushbutton?
      jne Button1

      bit.b  #%10000000, &P2IFG   ; was it this Pushbutton?
      jne Button2
      
      ;jmp Done_here
      clr.b &P2IFG    ; clear the flag so system is ready for another interrupt

      
      
Done_here
    reti         ; return from interrupt
;-------------------------------------------------------------------------------
;  end of TA0_ISR   Port2_ISR Interrupt Service Routine
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;           End of all Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           Definition of Program Data Memory
;-------------------------------------------------------------------------------
            ORG   0xE000   ; this line not strictly necessary, but does force
                            ; the location of this program memory data - this is
                            ; a matter of convenience  - need to leave enough
                            ; space ahead of Interrupt Vectors for the data that
                            ; we are putting here

; usage: use SegPatternTable as base address, then offset into table for
; a specific 7-seg number (pattern) to display
SegPatternTable  ; contains patterns for each 7-seg number
     DB  ZERO_N
     DB  ONE_N
     DB  TWO_N
     DB  THREE_N
     DB  FOUR_N
     DB  FIVE_N
     DB  SIX_N
     DB  SEVEN_N
     DB  EIGHT_N
     DB  NINE_N
     DB  SEG_G_N
     DB  TWO_N_DP
     DB  THREE_N_DP
     
; usage: use DigitPatternTable as base address, then offset into table for
; a specific digit position to display
DigitPatternTable  ; contains patterns for each digit position common selection
     DB  DIG_0_N
     DB  DIG_1_N
     DB  DIG_2_N
     DB  DIG_3_N
     DB  DIG_4_N


;-------------------------------------------------------------------------------
;           Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     0xFFF2                  ;TimerA_0 Vector
            DW      TA0_ISR                 ;TimerA_0 Interrupt Service Routine
            
            ORG     0xFFE6                  ;P2 interupt
            DW      Port2_ISR               ;Address of Port2_ISR               
          
            ORG     0xFFFE                  ; MSP430 RESET Vector
            DW      RESET                   ; establishes the label RESET as 
                                            ; the starting point
            END                             ; END of all code for this program
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
